class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        int[] status = new int[n];
        List<Integer> res = new ArrayList<>();
        
        for (int i = 0; i < n; ++i) {
            dfs(graph, status, i);
            
        }
        for (int i = 0; i < n; ++i) {
            if (status[i] == 1) {
                res.add(i);
            }
        }
        return res;
    }
    
    private void dfs(int[][] graph, int[] status, int cur) {
        if (status[cur] != 0) {
            return;
        }
        status[cur] = 2;
        for (int next: graph[cur]) {
            dfs(graph, status, next);
            if (status[next] == 2 || status[next] == -1) {
                status[cur] = -1;
                return;
            }
        }
        status[cur] = 1;
    }
}
