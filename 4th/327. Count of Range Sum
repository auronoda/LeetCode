class Solution {
    public int countRangeSum(int[] nums, int lower, int upper) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        long[] sums = new long[nums.length];
        sums[0] = nums[0];
        for (int i = 1; i < nums.length; ++i) {
            sums[i] = sums[i - 1] + nums[i];
        }
        return helper(sums, 0, sums.length - 1, lower, upper);
    }
    
    private int helper(long[] sums, int start, int end, int lower, int upper) {
        if (start > end) {
            return 0;
        }
        if (start == end) {
            return sums[start] >= lower && sums[start] <= upper? 1: 0;
        }
        
        int res = 0;
        int mid = start + (end - start) / 2;
        res += helper(sums, start, mid, lower, upper);
        res += helper(sums, mid + 1, end, lower, upper);
        
        int left = start, right = start;
        for (int i = mid + 1; i <= end; ++i) {
            while (left <= mid && sums[i] - sums[left] > upper) {
                left++;
            }
            while (right <= mid && sums[i] - sums[right] >= lower) {
                right++;
            }
            res += right - left;
        }
        
        long[] tmp = new long[end - start + 1];
        int i = start, j = mid + 1, k = 0;
        while (j <= end) {
            while (i <= mid && sums[i] <= sums[j]) {
                tmp[k++] = sums[i++];
            }
            tmp[k++] = sums[j++];
        }
        while (i <= mid) {
            tmp[k++] = sums[i++];
        }
        
        for (k = 0; k < tmp.length; ++k) {
            sums[start + k] = tmp[k];
        }
        return res;        
    }
}
